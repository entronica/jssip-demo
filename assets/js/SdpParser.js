module.exports = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { sdp: peg$parsesdp },
        peg$startRuleFunction  = peg$parsesdp,

        peg$c0 = function(line) {return line;},
        peg$c1 = function(line, lines) { 
        		lines.splice(0, 0, line);
        		var sdp = aggregate(lines);
        		return sdp;
        	},
        peg$c2 = /^[\r\n]/,
        peg$c3 = { type: "class", value: "[\\r\\n]", description: "[\\r\\n]" },
        peg$c4 = /^[ \t]/,
        peg$c5 = { type: "class", value: "[ \\t]", description: "[ \\t]" },
        peg$c6 = "=",
        peg$c7 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c8 = function(n) { return n; },
        peg$c9 = /^[\-0-9]/,
        peg$c10 = { type: "class", value: "[\\-0-9]", description: "[\\-0-9]" },
        peg$c11 = function(n) { return guessType(text()); },
        peg$c12 = /^[^ \t\n\r]/,
        peg$c13 = { type: "class", value: "[^ \\t\\n\\r]", description: "[^ \\t\\n\\r]" },
        peg$c14 = function(s) { return text();},
        peg$c15 = "v",
        peg$c16 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c17 = function(v) { return {version: v}; },
        peg$c18 = function(t) { return options.useUnixTimes ? t - NTP_OFFSET : t;},
        peg$c19 = "d",
        peg$c20 = { type: "literal", value: "d", description: "\"d\"" },
        peg$c21 = "h",
        peg$c22 = { type: "literal", value: "h", description: "\"h\"" },
        peg$c23 = "m",
        peg$c24 = { type: "literal", value: "m", description: "\"m\"" },
        peg$c25 = "s",
        peg$c26 = { type: "literal", value: "s", description: "\"s\"" },
        peg$c27 = function(x, p) { return x * DURATIONS[p];},
        peg$c28 = function(x) { return x;},
        peg$c29 = "o",
        peg$c30 = { type: "literal", value: "o", description: "\"o\"" },
        peg$c31 = function(username, sessionId, sessionVersion, networkType, addressType, unicastAddress) {
        		var o = {
        				username: username, 
        				sessionId: sessionId,
        				sessionVersion: sessionVersion,
        				networkType: networkType,
        				addressType: addressType,
        				unicastAddress: unicastAddress
        		};
        		var or = {};
        		or[SDP_TYPES["o"]] = o;
        		return or;
        	},
        peg$c32 = "c",
        peg$c33 = { type: "literal", value: "c", description: "\"c\"" },
        peg$c34 = function(networkType, addressType, connectionAddress) { 
        		return {connection: {
        				networkType: networkType,
        				addressType: addressType,
        				connectionAddress: connectionAddress
        		}};
        	},
        peg$c35 = "/",
        peg$c36 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c37 = function(type, port, n) {return n;},
        peg$c38 = /^[^ \t]/,
        peg$c39 = { type: "class", value: "[^ \\t]", description: "[^ \\t]" },
        peg$c40 = function(type, port, numberOfPorts) {return text();},
        peg$c41 = function(type, port, numberOfPorts, protocol, format) { return format;},
        peg$c42 = function(type, port, numberOfPorts, protocol, formats) {
        		var m = {
        			type: type
        			, port: port
        			, protocol: protocol
        		};
        		if (numberOfPorts) {
        			m.numberOfPorts = numberOfPorts;
        		}
        		// TODO better detection of RTP
        		if (options.parseRtpPayloads !== false && protocol.indexOf("RTP/") >= 0) {
        			m.payloads = formats;
        			m.payloads.forEach(function(value, index, arr) {
        					arr[index] = guessType(value);
        				});
        		} else {
        			m.formats = formats;
        		}
        		return {media: m};
        	},
        peg$c43 = "b",
        peg$c44 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c45 = ":",
        peg$c46 = { type: "literal", value: ":", description: "\":\"" },
        peg$c47 = function(type, value) { return {bandwidth: {type: type, value: value}}},
        peg$c48 = "t",
        peg$c49 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c50 = function(start, stop) {return {timing:{start: start, stop: stop}}},
        peg$c51 = "r",
        peg$c52 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c53 = function(interval, activeDuration, d) {return d;},
        peg$c54 = function(interval, activeDuration, offsets) { return {repeat: {interval: interval, activeDuration: activeDuration, offsets: offsets}}},
        peg$c55 = "z",
        peg$c56 = { type: "literal", value: "z", description: "\"z\"" },
        peg$c57 = function(t) {return t;},
        peg$c58 = function(t, ts) { return {timezones: [t].concat(ts)};},
        peg$c59 = function(adjustment, offset) {return {adjustment: adjustment, offset: offset}},
        peg$c60 = "k",
        peg$c61 = { type: "literal", value: "k", description: "\"k\"" },
        peg$c62 = /^[^:\r\n]/,
        peg$c63 = { type: "class", value: "[^:\\r\\n]", description: "[^:\\r\\n]" },
        peg$c64 = function() {return text();},
        peg$c65 = function(method, key) { return {encryptionKey: {method: method, key: key}};},
        peg$c66 = function(method) { return {encryptionKey: {method: method}};},
        peg$c67 = "a",
        peg$c68 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c69 = "rtpmap",
        peg$c70 = { type: "literal", value: "rtpmap", description: "\"rtpmap\"" },
        peg$c71 = /^[^\/]/,
        peg$c72 = { type: "class", value: "[^/]", description: "[^/]" },
        peg$c73 = function(payload) {return text();},
        peg$c74 = function(payload, codec, rate, params) {return guessType(params);},
        peg$c75 = function(payload, codec, rate, codecParams) {
        		var rtp = {
        				payload: payload,
        				codec: codec,
        				rate: rate
        		};
        		if (codecParams) {
        			rtp.codecParams = codecParams;
        		}
        		return {rtp: rtp};
        	},
        peg$c76 = "fmtp",
        peg$c77 = { type: "literal", value: "fmtp", description: "\"fmtp\"" },
        peg$c78 = function(payload, params) {
        		return { fmtp: {
        				payload: payload,
        				params: params
        		}};
        	},
        peg$c79 = ";",
        peg$c80 = { type: "literal", value: ";", description: "\";\"" },
        peg$c81 = function(param, p) {return p;},
        peg$c82 = function(param, params) {
        		if (params) {
        			params.splice(0, 0, param);
        		} else {
        			params = [param];
        		}
        		return aggregateSdpProperties(params);
        	},
        peg$c83 = /^[^\r\n]/,
        peg$c84 = { type: "class", value: "[^\\r\\n]", description: "[^\\r\\n]" },
        peg$c85 = function(config) { return text();},
        peg$c86 = /^[^=;\r\n]/,
        peg$c87 = { type: "class", value: "[^=;\\r\\n]", description: "[^=;\\r\\n]" },
        peg$c88 = function() {return text()},
        peg$c89 = /^[^;\r\n]/,
        peg$c90 = { type: "class", value: "[^;\\r\\n]", description: "[^;\\r\\n]" },
        peg$c91 = function(name) {return guessType(text());},
        peg$c92 = function(name, value) { var param = {}; param[name] = value; return param;},
        peg$c93 = function(property) {
        		var p = {}; 
        		p[property] = true; 
        		return p;
        	},
        peg$c94 = /^[^\n\r]/,
        peg$c95 = { type: "class", value: "[^\\n\\r]", description: "[^\\n\\r]" },
        peg$c96 = function(property) {return guessType(text());},
        peg$c97 = function(property, value) {
        		var p = {}; 
        		p[property] = value; 
        		return p;
        	},
        peg$c98 = /^[^\n\r:]/,
        peg$c99 = { type: "class", value: "[^\\n\\r:]", description: "[^\\n\\r:]" },
        peg$c100 = function() {
        		var name = text(); 
        		if (options["useLongNames"] !== false && SDP_TYPES[name]) {
        			return SDP_TYPES[name];
        		}
        		return name;
        	},
        peg$c101 = /^[a-z]/,
        peg$c102 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c103 = function(type) {return text();},
        peg$c104 = function(type, value) { 
        		var t = {};
        		t[SDP_TYPES[type] ? SDP_TYPES[type] : type] = value;
        		return t;
        	},

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsesdp() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseSdpLine();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c0(s2);
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parse_eol();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSdpLine();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c0(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parse_eol();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSdpLine();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c0(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parse_eol();
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$parse_eol();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c1(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse_eol() {
      var s0, s1;

      s0 = [];
      if (peg$c2.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c2.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c3); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parse_() {
      var s0, s1;

      s0 = [];
      if (peg$c4.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s1 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseeq() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 61) {
        s0 = peg$c6;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c7); }
      }

      return s0;
    }

    function peg$parseversionNumber() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c8(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsenumber() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c9.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c10); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c9.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c11(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsestr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c12.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c12.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c13); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c14(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseSdpLine() {
      var s0;

      s0 = peg$parseversion();
      if (s0 === peg$FAILED) {
        s0 = peg$parseorigin();
        if (s0 === peg$FAILED) {
          s0 = peg$parsemedia();
          if (s0 === peg$FAILED) {
            s0 = peg$parseconnection();
            if (s0 === peg$FAILED) {
              s0 = peg$parsetiming();
              if (s0 === peg$FAILED) {
                s0 = peg$parserepeat();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsetimezones();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseencryptionKey();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsebandwidth();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parseattribute();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseotherType();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseversion() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 118) {
        s1 = peg$c15;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseversionNumber();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c17(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetime() {
      var s0, s1;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c18(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseduration() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 100) {
          s2 = peg$c19;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c20); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 104) {
            s2 = peg$c21;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c22); }
          }
          if (s2 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 109) {
              s2 = peg$c23;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c24); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 115) {
                s2 = peg$c25;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c26); }
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c27(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsenumber();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c28(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseorigin() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 111) {
        s1 = peg$c29;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c30); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseversionNumber();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$parse_();
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsestr();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$parse_();
                        if (s10 !== peg$FAILED) {
                          s11 = peg$parsestr();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parse_();
                            if (s12 !== peg$FAILED) {
                              s13 = peg$parsestr();
                              if (s13 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c31(s3, s5, s7, s9, s11, s13);
                                s0 = s1;
                              } else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseconnection() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 99) {
        s1 = peg$c32;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c33); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestr();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsestr();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c34(s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsemedia() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 109) {
        s1 = peg$c23;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 47) {
                  s7 = peg$c35;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c36); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsenumber();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s6;
                    s7 = peg$c37(s3, s5, s8);
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parse_();
                  if (s7 !== peg$FAILED) {
                    s8 = peg$currPos;
                    s9 = [];
                    if (peg$c38.test(input.charAt(peg$currPos))) {
                      s10 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s10 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c39); }
                    }
                    if (s10 !== peg$FAILED) {
                      while (s10 !== peg$FAILED) {
                        s9.push(s10);
                        if (peg$c38.test(input.charAt(peg$currPos))) {
                          s10 = input.charAt(peg$currPos);
                          peg$currPos++;
                        } else {
                          s10 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c39); }
                        }
                      }
                    } else {
                      s9 = peg$FAILED;
                    }
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s8;
                      s9 = peg$c40(s3, s5, s6);
                    }
                    s8 = s9;
                    if (s8 !== peg$FAILED) {
                      s9 = [];
                      s10 = peg$currPos;
                      s11 = peg$parse_();
                      if (s11 !== peg$FAILED) {
                        s12 = peg$parsestr();
                        if (s12 !== peg$FAILED) {
                          peg$savedPos = s10;
                          s11 = peg$c41(s3, s5, s6, s8, s12);
                          s10 = s11;
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s10;
                        s10 = peg$FAILED;
                      }
                      if (s10 !== peg$FAILED) {
                        while (s10 !== peg$FAILED) {
                          s9.push(s10);
                          s10 = peg$currPos;
                          s11 = peg$parse_();
                          if (s11 !== peg$FAILED) {
                            s12 = peg$parsestr();
                            if (s12 !== peg$FAILED) {
                              peg$savedPos = s10;
                              s11 = peg$c41(s3, s5, s6, s8, s12);
                              s10 = s11;
                            } else {
                              peg$currPos = s10;
                              s10 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        }
                      } else {
                        s9 = peg$FAILED;
                      }
                      if (s9 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c42(s3, s5, s6, s8, s9);
                        s0 = s1;
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebandwidth() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 98) {
        s1 = peg$c43;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c44); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsestr();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c45;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c47(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetiming() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 116) {
        s1 = peg$c48;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c49); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetime();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsetime();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c50(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parserepeat() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 114) {
        s1 = peg$c51;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c52); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseduration();
          if (s3 !== peg$FAILED) {
            s4 = peg$parse_();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseduration();
              if (s5 !== peg$FAILED) {
                s6 = [];
                s7 = peg$currPos;
                s8 = peg$parse_();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseduration();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c53(s3, s5, s9);
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  s7 = peg$currPos;
                  s8 = peg$parse_();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseduration();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s7;
                      s8 = peg$c53(s3, s5, s9);
                      s7 = s8;
                    } else {
                      peg$currPos = s7;
                      s7 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c54(s3, s5, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetimezones() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 122) {
        s1 = peg$c55;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetimezone();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parse_();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsetimezone();
              if (s7 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c57(s7);
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              while (s5 !== peg$FAILED) {
                s4.push(s5);
                s5 = peg$currPos;
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsetimezone();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s6 = peg$c57(s7);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              }
            } else {
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c58(s3, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetimezone() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsenumber();
      if (s1 !== peg$FAILED) {
        s2 = peg$parse_();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseduration();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c59(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseencryptionKey() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 107) {
        s1 = peg$c60;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c61); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c62.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c63); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c62.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c63); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c64();
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c45;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsestr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c65(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 107) {
          s1 = peg$c60;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c61); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseeq();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsestr();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c66(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseattribute() {
      var s0;

      s0 = peg$parsertpmapAttribute();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefmtpAttribute();
        if (s0 === peg$FAILED) {
          s0 = peg$parsevalueAttribute();
          if (s0 === peg$FAILED) {
            s0 = peg$parsepropertyAttribute();
          }
        }
      }

      return s0;
    }

    function peg$parsertpmapAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 97) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c69) {
            s3 = peg$c69;
            peg$currPos += 6;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c70); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c45;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$currPos;
                  s8 = [];
                  if (peg$c71.test(input.charAt(peg$currPos))) {
                    s9 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c72); }
                  }
                  if (s9 !== peg$FAILED) {
                    while (s9 !== peg$FAILED) {
                      s8.push(s9);
                      if (peg$c71.test(input.charAt(peg$currPos))) {
                        s9 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s9 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c72); }
                      }
                    }
                  } else {
                    s8 = peg$FAILED;
                  }
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s7;
                    s8 = peg$c73(s5);
                  }
                  s7 = s8;
                  if (s7 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 47) {
                      s8 = peg$c35;
                      peg$currPos++;
                    } else {
                      s8 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c36); }
                    }
                    if (s8 !== peg$FAILED) {
                      s9 = peg$parsenumber();
                      if (s9 !== peg$FAILED) {
                        s10 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 47) {
                          s11 = peg$c35;
                          peg$currPos++;
                        } else {
                          s11 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c36); }
                        }
                        if (s11 !== peg$FAILED) {
                          s12 = peg$parsestr();
                          if (s12 !== peg$FAILED) {
                            peg$savedPos = s10;
                            s11 = peg$c74(s5, s7, s9, s12);
                            s10 = s11;
                          } else {
                            peg$currPos = s10;
                            s10 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s10;
                          s10 = peg$FAILED;
                        }
                        if (s10 === peg$FAILED) {
                          s10 = null;
                        }
                        if (s10 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$c75(s5, s7, s9, s10);
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsefmtpAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 97) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c76) {
            s3 = peg$c76;
            peg$currPos += 4;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c77); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c45;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsenumber();
              if (s5 !== peg$FAILED) {
                s6 = peg$parse_();
                if (s6 !== peg$FAILED) {
                  s7 = peg$parseformatParameters();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c78(s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseformatParameters() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseformatParameter();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 59) {
          s4 = peg$c79;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c80); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          if (peg$c4.test(input.charAt(peg$currPos))) {
            s6 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s6 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c5); }
          }
          while (s6 !== peg$FAILED) {
            s5.push(s6);
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parseformatParameter();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c81(s1, s6);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 59) {
            s4 = peg$c79;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c80); }
          }
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c4.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c5); }
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              if (peg$c4.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c5); }
              }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseformatParameter();
              if (s6 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c81(s1, s6);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c82(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        if (peg$c83.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c84); }
        }
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            if (peg$c83.test(input.charAt(peg$currPos))) {
              s2 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c84); }
            }
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c85(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseformatParameter() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = [];
      if (peg$c86.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c87); }
      }
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (peg$c86.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c87); }
          }
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s1;
        s2 = peg$c88();
      }
      s1 = s2;
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c89.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c90); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c89.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c90); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c91(s1);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c92(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsepropertyAttribute() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 97) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeName();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c93(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsevalueAttribute() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 97) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseattributeName();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 58) {
              s4 = peg$c45;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = [];
              if (peg$c94.test(input.charAt(peg$currPos))) {
                s7 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c95); }
              }
              if (s7 !== peg$FAILED) {
                while (s7 !== peg$FAILED) {
                  s6.push(s7);
                  if (peg$c94.test(input.charAt(peg$currPos))) {
                    s7 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c95); }
                  }
                }
              } else {
                s6 = peg$FAILED;
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s5;
                s6 = peg$c96(s3);
              }
              s5 = s6;
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c97(s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseattributeName() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c98.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c98.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c99); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c100();
      }
      s0 = s1;

      return s0;
    }

    function peg$parseotherType() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (peg$c101.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseeq();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = [];
          if (peg$c83.test(input.charAt(peg$currPos))) {
            s5 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c84); }
          }
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              if (peg$c83.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c84); }
              }
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c103(s1);
          }
          s3 = s4;
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c104(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }


    var jsCommon = require("jscommon");
    var guessType = jsCommon.guessType, isInt = jsCommon.isInt;

    /** The offset of the NTP time compared to Unix time. */
    var NTP_OFFSET = 2208988800;

    var DURATIONS = { "d": 86400, "h": 3600, "m": 60, "s": 1};
    DURATIONS.FORMAT_ORDER = ["d", "h", "m"];

    /** End of line. */
    var EOL = "\r\n";

    /** The SDP types and the corresponding properties. */
    var SDP_TYPES = {
    	v: "version"
    	, o: "origin"
    	, s: "sessionName"
    	, i: "sessionDescription"
    	, u: "uri"
    	, e: "emailAddress"
    	, p: "phoneNumber"
    	, c: "connection"
    	, m: "media"
    	, b: "bandwidth"
    	, t: "timing"
    	, r: "repeat"
    	, z: "timezones"
    	, k: "encryptionKey"
    	, cat: "category"
    	, keywds: "keywords"
    	, ptime: "packetTime"
    	, maxptime: "maximumPacketTime"
    	, orient: "orientation"
    	, rtp: "rtpmap"
    	, "payloads": ""
    };

    for (var t in SDP_TYPES) {
    	if (SDP_TYPES.hasOwnProperty(t)) {
    		SDP_TYPES[SDP_TYPES[t]] = t;
    	}
    }

    var aggregateSdpProperties = function(sdpProperties) {
    	var sdp = {};
    	var obj = sdp;
    	for (var i = 0; i < sdpProperties.length; i++) {
    		for (var p in sdpProperties[i]) {
    			if (sdpProperties[i].hasOwnProperty(p)) {
    				if (options.useMediaSections !== false && p == SDP_TYPES["m"]) {
    					obj = sdp;
    				}
    				if (obj[p]) {
    					if (!obj[p].push) {
    						obj[p] = [obj[p]];
    					}
    					obj[p].push(sdpProperties[i][p]);
    				} else {
    					obj[p] = sdpProperties[i][p];	
    				}
    				if (options.useMediaSections !== false && p == SDP_TYPES["m"]) {
    					obj = sdpProperties[i][p];
    				}
    			}
    		}
    	}
    	return sdp;
    };

    var aggregateSdp = function(sdpProperties) {
    	var sdp = aggregateSdpProperties(sdpProperties);
    	// ensure that media is an array
    	if (sdp.media && !sdp.media.join) {
    		sdp.media = [sdp.media];
    	}

    	// aggregate payloads in each media section
    	if (options.aggregatePayloads !== false) {
    		aggregatePayloads(sdp);
    	}
    	return sdp;
    };

    var aggregate = aggregateSdp;

    var aggregatePayloads = function(sdp) {
    	if (!sdp.media || !sdp.media.length) {
    		return sdp;
    	}
    	for (var i = 0; i < sdp.media.length; i++) { 
    		var m = sdp.media[i];
    		if (!m.payloads) {
    			continue;
    		}
    		var payloads = [];
    		for (var j = 0; j < m.payloads.length; j++) { 
    			var payload = {id: m.payloads[j]};
    			aggregatePayloadAttribute(payload, m, "rtp");
    			aggregatePayloadAttribute(payload, m, "fmtp");
    			payloads[j] = payload;
    		}
    		if (m.rtp) {
    			delete m.rtp;
    		}
    		if (m.fmtp) {
    			delete m.fmtp;
    		}
    		m.payloads = payloads;
    	}
    	return sdp;
    };

    var aggregatePayloadAttribute = function(payload, media, attr) {
    	if (media[attr] && !media[attr].push) {
    		media[attr] = [media[attr]];
    	}
    	if (media[attr]) {
    		payload[attr] = getPayload(media[attr], payload.id);
    	}
    	if (payload[attr]) {
    		delete payload[attr].payload;
    	} else {
    		delete payload[attr];
    	}
    };

    var getPayload = function(payloads, id) {
    	if (payloads.payload === id) {
    		return payloads;
    	}
    	for (var i = 0; i < payloads.length; i++) {
    		if (payloads[i].payload === id) {
    			return payloads[i];
    		}
    	}
    	return null;
    };

    var OUTPUT_ORDER = ["v", "o", "s", "i", "u", "e", "p", "c", "b", "t", "r", "z", "k", "a", "*", "m"];
    var MEDIA_OUTPUT_ORDER = ["i", "c", "b", "k", "rtcp", "ice-ufrag", "ice-pwd", "fingerprint", "setup", "mid", "extmap", "sendrecv", "rtcp-mux", "payloads", "ptime", "maxptime", "ssrc"];
    var getOutputOrder = function(order, property) {
    	var idx = order.indexOf(property);
    	if (idx < 0) {
    		idx = order.indexOf(SDP_TYPES[property]);
    	}
    	if (idx < 0) {
    		idx = order.indexOf("*");
    	}
    	if (idx < 0) {
    		idx = order.length;
    	}
    };

    var ordering = function(order) {
    	return function(a, b) {
    		return getOutputOrder(order, a) - getOutputOrder(order, b);
    	};
    };

    var formatSdp = function(sdp) {
    	return formatSdpSection(sdp, null, OUTPUT_ORDER);
    };

    parser.format = formatSdp;

    var formatSdpSection = function(section, excluded, order) {
    	var s = "";

    	jsCommon.forEach(section, 
    			function(value, property, section) {
    				s += formatSdpProperty(section, property);
    			}, 
    			{
    				blacklist: excluded ? function(p) { return excluded.indexOf(p) >= 0 || excluded.indexOf(SDP_TYPES[p]) >= 0;} : null,
    				comparator: ordering(order)
    			});

    	// remove empty lines - it seems that browsers cannot deal with empty lines in SDP, even at the end 
    	s = s.replace(/[\r\n]{2,}/g, EOL);
    	return s;
    };

    var formatSdpProperty = function(section, propertyName) {
    	// if the property does not exist, return empty
    	if (section[propertyName] === undefined) {
    		return "";
    	}
    	// get the prefix of the property according to SDP specs
    	var prefix = SDP_TYPES[propertyName] !== undefined ? SDP_TYPES[propertyName] : propertyName;
    	// gets the formatter for the property
    	var formatter = FORMATTERS[propertyName] || FORMATTERS[prefix] || FORMATTERS["*"];
    	// if the prefix is one single character, then it is a SDP type
    	// otherwise it is a SDP attribute
    	if (prefix.length > 1) {
    		prefix = "a=" + prefix;
    		if (section[propertyName] === false) {
    			return "";
    		}
    		if (section[propertyName] === true) {
    			return prefix + EOL;
    		}
    		prefix += ":";
    	} else if (prefix.length > 0) {
    		prefix += "=";
    	}

    	if (propertyName !== "timezones" && section[propertyName].push) {
    		var s = "";
    		for (var i = 0; i < section[propertyName].length; i++) {
    			s += prefix + formatter(section[propertyName][i], section[propertyName]) + (prefix.length ? EOL : "");
    		}
    		return s;
    	}
    	return prefix + formatter(section[propertyName], section) + (prefix.length ? EOL : "");
    };

    // A formatter for each SDP property or attribute. The default one is "*"
    // A formatter is a function that receives the property value and the section
    var FORMATTERS = {
    "*": function(value) {
    	return value.toString();
    }
    , origin: function(origin) {
    	return origin.username + " " + origin.sessionId 
    			+ " " + origin.sessionVersion 
    			+ " " + origin.networkType
    			+ " " + origin.addressType
    			+ " " + origin.unicastAddress;
    }
    , timing: function(timing) {
    	return timing.start + " " + timing.stop;
    }
    , duration: function(duration) {
    	if (duration === 0) {
    		return duration;
    	}
    	for (var i = 0, n = DURATIONS.FORMAT_ORDER.length; i < n; i++) {
    		var x = duration / DURATIONS[DURATIONS.FORMAT_ORDER[i]];
    		if (isInt(x)) {
    			return x + DURATIONS.FORMAT_ORDER[i];
    		}
    	}
    	return duration;
    }
    , repeat: function(repeat) {
    	var s = FORMATTERS.duration(repeat.interval) + " " + FORMATTERS.duration(repeat.activeDuration);
    	for (var i = 0, n = repeat.offsets.length; i < n; i++) {
    		s +=  " " + FORMATTERS.duration(repeat.offsets[i]);
    	}
    	return s;
    }
    , timezones: function(timezones) {
    	var s = "";
    	for (var i = 0, n = timezones.length; i < n; i++) {
    		s += (i > 0 ? " " : "") + timezones[i].adjustment + " " + FORMATTERS.duration(timezones[i].offset);
    	}
    	return s;
    }
    , encryptionKey: function(encryptionKey) {
    	return encryptionKey.method + (encryptionKey.key ? ":" + encryptionKey.key : "");
    }
    , media: function(media) {
    	var s = media.type 
    			+ " " + media.port 
    			+ (media.numberOfPorts ? "/" + media.numberOfPorts : "")
    			+ " " + media.protocol;
    	if (media.formats) {
    		s += " " + media.formats.join(" ") + EOL;
    	}
    	if (media.payloads) {
    		for (var i = 0; i < media.payloads.length; i++) {
    			s += " " + media.payloads[i].id;
    		}
    		s += EOL;
    	}
    	s += formatSdpSection(media, ["type", "port", "protocol", "numberOfPorts", "formats"], MEDIA_OUTPUT_ORDER);
    	return s;
    }
    , payloads: function(payload) {
    	return formatSdpSection(payload, ["id"], ["rtp", "fmtp"]);
    }
    , rtpmap: function(rtp, parent) {
    	var s = parent.id + " " + rtp.codec + "/" + rtp.rate;
    	if (rtp.codecParams) {
    		s += "/" + rtp.codecParams;
    	}
    	return s;
    }
    , fmtp: function(fmtp, parent) {
    	var s = parent.id + " ";
    	if (fmtp.params.split) {
    		s += fmtp.params;
    	} else {
    		var i = 0;
    		for (var p in fmtp.params) {
    			if (fmtp.params.hasOwnProperty(p)) {
    				s += (++i === 1 ? "" : "; ") + p + "=" + fmtp.params[p];
    			}
    		}
    	}
    	return s;
    }
    , connection: function(connection) {
    	return connection.networkType
    			+ " " + connection.addressType
    			+ " " + connection.connectionAddress;
    }
    };



    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
